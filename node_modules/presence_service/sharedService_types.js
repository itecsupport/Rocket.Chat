//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
TDomain = module.exports.TDomain = function(args) {
  this.id = null;
  this.organization = null;
  this.sipdomain = null;
  this.language = null;
  this.fax_domain = null;
  this.enabled = null;
  this.param_ivrs = null;
  this.param_users = null;
  this.param_extensions = null;
  this.param_queues = null;
  this.param_phonebooks = null;
  this.param_voicemailconfigurations = null;
  this.param_faxconfigurations = null;
  this.param_mobilityconfigurations = null;
  this.param_faxchans = null;
  this.param_conferencechans = null;
  this.param_calls = null;
  this.param_softphonev0 = null;
  this.param_imusers = null;
  this.param_oppanels = null;
  this.param_g729clientchans = null;
  this.param_wificonfigurations = null;
  this.altnames = null;
  this.param_recordchans = null;
  this.param_callrecordconfusers = null;
  this.param_outlookplugins = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.organization !== undefined) {
      this.organization = args.organization;
    }
    if (args.sipdomain !== undefined) {
      this.sipdomain = args.sipdomain;
    }
    if (args.language !== undefined) {
      this.language = args.language;
    }
    if (args.fax_domain !== undefined) {
      this.fax_domain = args.fax_domain;
    }
    if (args.enabled !== undefined) {
      this.enabled = args.enabled;
    }
    if (args.param_ivrs !== undefined) {
      this.param_ivrs = args.param_ivrs;
    }
    if (args.param_users !== undefined) {
      this.param_users = args.param_users;
    }
    if (args.param_extensions !== undefined) {
      this.param_extensions = args.param_extensions;
    }
    if (args.param_queues !== undefined) {
      this.param_queues = args.param_queues;
    }
    if (args.param_phonebooks !== undefined) {
      this.param_phonebooks = args.param_phonebooks;
    }
    if (args.param_voicemailconfigurations !== undefined) {
      this.param_voicemailconfigurations = args.param_voicemailconfigurations;
    }
    if (args.param_faxconfigurations !== undefined) {
      this.param_faxconfigurations = args.param_faxconfigurations;
    }
    if (args.param_mobilityconfigurations !== undefined) {
      this.param_mobilityconfigurations = args.param_mobilityconfigurations;
    }
    if (args.param_faxchans !== undefined) {
      this.param_faxchans = args.param_faxchans;
    }
    if (args.param_conferencechans !== undefined) {
      this.param_conferencechans = args.param_conferencechans;
    }
    if (args.param_calls !== undefined) {
      this.param_calls = args.param_calls;
    }
    if (args.param_softphonev0 !== undefined) {
      this.param_softphonev0 = args.param_softphonev0;
    }
    if (args.param_imusers !== undefined) {
      this.param_imusers = args.param_imusers;
    }
    if (args.param_oppanels !== undefined) {
      this.param_oppanels = args.param_oppanels;
    }
    if (args.param_g729clientchans !== undefined) {
      this.param_g729clientchans = args.param_g729clientchans;
    }
    if (args.param_wificonfigurations !== undefined) {
      this.param_wificonfigurations = args.param_wificonfigurations;
    }
    if (args.altnames !== undefined) {
      this.altnames = args.altnames;
    }
    if (args.param_recordchans !== undefined) {
      this.param_recordchans = args.param_recordchans;
    }
    if (args.param_callrecordconfusers !== undefined) {
      this.param_callrecordconfusers = args.param_callrecordconfusers;
    }
    if (args.param_outlookplugins !== undefined) {
      this.param_outlookplugins = args.param_outlookplugins;
    }
  }
};
TDomain.prototype = {};
TDomain.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.organization = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sipdomain = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.language = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.fax_domain = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.param_ivrs = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.param_users = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.param_extensions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.param_queues = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.param_phonebooks = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.param_voicemailconfigurations = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.param_faxconfigurations = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.param_mobilityconfigurations = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.param_faxchans = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.param_conferencechans = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.param_calls = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I32) {
        this.param_softphonev0 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I32) {
        this.param_imusers = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.param_oppanels = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.I32) {
        this.param_g729clientchans = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.param_wificonfigurations = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.altnames = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I32) {
        this.param_recordchans = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.I32) {
        this.param_callrecordconfusers = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 26:
      if (ftype == Thrift.Type.I32) {
        this.param_outlookplugins = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TDomain.prototype.write = function(output) {
  output.writeStructBegin('TDomain');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.organization !== null && this.organization !== undefined) {
    output.writeFieldBegin('organization', Thrift.Type.STRING, 2);
    output.writeString(this.organization);
    output.writeFieldEnd();
  }
  if (this.sipdomain !== null && this.sipdomain !== undefined) {
    output.writeFieldBegin('sipdomain', Thrift.Type.STRING, 3);
    output.writeString(this.sipdomain);
    output.writeFieldEnd();
  }
  if (this.language !== null && this.language !== undefined) {
    output.writeFieldBegin('language', Thrift.Type.STRING, 4);
    output.writeString(this.language);
    output.writeFieldEnd();
  }
  if (this.fax_domain !== null && this.fax_domain !== undefined) {
    output.writeFieldBegin('fax_domain', Thrift.Type.STRING, 5);
    output.writeString(this.fax_domain);
    output.writeFieldEnd();
  }
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 6);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  if (this.param_ivrs !== null && this.param_ivrs !== undefined) {
    output.writeFieldBegin('param_ivrs', Thrift.Type.I32, 7);
    output.writeI32(this.param_ivrs);
    output.writeFieldEnd();
  }
  if (this.param_users !== null && this.param_users !== undefined) {
    output.writeFieldBegin('param_users', Thrift.Type.I32, 8);
    output.writeI32(this.param_users);
    output.writeFieldEnd();
  }
  if (this.param_extensions !== null && this.param_extensions !== undefined) {
    output.writeFieldBegin('param_extensions', Thrift.Type.I32, 9);
    output.writeI32(this.param_extensions);
    output.writeFieldEnd();
  }
  if (this.param_queues !== null && this.param_queues !== undefined) {
    output.writeFieldBegin('param_queues', Thrift.Type.I32, 10);
    output.writeI32(this.param_queues);
    output.writeFieldEnd();
  }
  if (this.param_phonebooks !== null && this.param_phonebooks !== undefined) {
    output.writeFieldBegin('param_phonebooks', Thrift.Type.I32, 11);
    output.writeI32(this.param_phonebooks);
    output.writeFieldEnd();
  }
  if (this.param_voicemailconfigurations !== null && this.param_voicemailconfigurations !== undefined) {
    output.writeFieldBegin('param_voicemailconfigurations', Thrift.Type.I32, 12);
    output.writeI32(this.param_voicemailconfigurations);
    output.writeFieldEnd();
  }
  if (this.param_faxconfigurations !== null && this.param_faxconfigurations !== undefined) {
    output.writeFieldBegin('param_faxconfigurations', Thrift.Type.I32, 13);
    output.writeI32(this.param_faxconfigurations);
    output.writeFieldEnd();
  }
  if (this.param_mobilityconfigurations !== null && this.param_mobilityconfigurations !== undefined) {
    output.writeFieldBegin('param_mobilityconfigurations', Thrift.Type.I32, 14);
    output.writeI32(this.param_mobilityconfigurations);
    output.writeFieldEnd();
  }
  if (this.param_faxchans !== null && this.param_faxchans !== undefined) {
    output.writeFieldBegin('param_faxchans', Thrift.Type.I32, 15);
    output.writeI32(this.param_faxchans);
    output.writeFieldEnd();
  }
  if (this.param_conferencechans !== null && this.param_conferencechans !== undefined) {
    output.writeFieldBegin('param_conferencechans', Thrift.Type.I32, 16);
    output.writeI32(this.param_conferencechans);
    output.writeFieldEnd();
  }
  if (this.param_calls !== null && this.param_calls !== undefined) {
    output.writeFieldBegin('param_calls', Thrift.Type.I32, 17);
    output.writeI32(this.param_calls);
    output.writeFieldEnd();
  }
  if (this.param_softphonev0 !== null && this.param_softphonev0 !== undefined) {
    output.writeFieldBegin('param_softphonev0', Thrift.Type.I32, 18);
    output.writeI32(this.param_softphonev0);
    output.writeFieldEnd();
  }
  if (this.param_imusers !== null && this.param_imusers !== undefined) {
    output.writeFieldBegin('param_imusers', Thrift.Type.I32, 19);
    output.writeI32(this.param_imusers);
    output.writeFieldEnd();
  }
  if (this.param_oppanels !== null && this.param_oppanels !== undefined) {
    output.writeFieldBegin('param_oppanels', Thrift.Type.I32, 20);
    output.writeI32(this.param_oppanels);
    output.writeFieldEnd();
  }
  if (this.param_g729clientchans !== null && this.param_g729clientchans !== undefined) {
    output.writeFieldBegin('param_g729clientchans', Thrift.Type.I32, 21);
    output.writeI32(this.param_g729clientchans);
    output.writeFieldEnd();
  }
  if (this.param_wificonfigurations !== null && this.param_wificonfigurations !== undefined) {
    output.writeFieldBegin('param_wificonfigurations', Thrift.Type.I32, 22);
    output.writeI32(this.param_wificonfigurations);
    output.writeFieldEnd();
  }
  if (this.altnames !== null && this.altnames !== undefined) {
    output.writeFieldBegin('altnames', Thrift.Type.STRING, 23);
    output.writeString(this.altnames);
    output.writeFieldEnd();
  }
  if (this.param_recordchans !== null && this.param_recordchans !== undefined) {
    output.writeFieldBegin('param_recordchans', Thrift.Type.I32, 24);
    output.writeI32(this.param_recordchans);
    output.writeFieldEnd();
  }
  if (this.param_callrecordconfusers !== null && this.param_callrecordconfusers !== undefined) {
    output.writeFieldBegin('param_callrecordconfusers', Thrift.Type.I32, 25);
    output.writeI32(this.param_callrecordconfusers);
    output.writeFieldEnd();
  }
  if (this.param_outlookplugins !== null && this.param_outlookplugins !== undefined) {
    output.writeFieldBegin('param_outlookplugins', Thrift.Type.I32, 26);
    output.writeI32(this.param_outlookplugins);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ORMFilter = module.exports.ORMFilter = function(args) {
  this.where = null;
  this.group = null;
  this.limit = null;
  this.order = null;
  if (args) {
    if (args.where !== undefined) {
      this.where = args.where;
    }
    if (args.group !== undefined) {
      this.group = args.group;
    }
    if (args.limit !== undefined) {
      this.limit = args.limit;
    }
    if (args.order !== undefined) {
      this.order = args.order;
    }
  }
};
ORMFilter.prototype = {};
ORMFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.where = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.where.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.group = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString();
          this.group.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.limit = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = input.readI32();
          this.limit.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.order = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = input.readString();
          this.order.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ORMFilter.prototype.write = function(output) {
  output.writeStructBegin('ORMFilter');
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.where.length);
    for (var iter28 in this.where)
    {
      if (this.where.hasOwnProperty(iter28))
      {
        iter28 = this.where[iter28];
        output.writeString(iter28);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.group.length);
    for (var iter29 in this.group)
    {
      if (this.group.hasOwnProperty(iter29))
      {
        iter29 = this.group[iter29];
        output.writeString(iter29);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I32, this.limit.length);
    for (var iter30 in this.limit)
    {
      if (this.limit.hasOwnProperty(iter30))
      {
        iter30 = this.limit[iter30];
        output.writeI32(iter30);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.order.length);
    for (var iter31 in this.order)
    {
      if (this.order.hasOwnProperty(iter31))
      {
        iter31 = this.order[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TPermission = module.exports.TPermission = function(args) {
  this.id = null;
  this.handler = null;
  this.method = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.handler !== undefined) {
      this.handler = args.handler;
    }
    if (args.method !== undefined) {
      this.method = args.method;
    }
  }
};
TPermission.prototype = {};
TPermission.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.handler = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPermission.prototype.write = function(output) {
  output.writeStructBegin('TPermission');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.handler !== null && this.handler !== undefined) {
    output.writeFieldBegin('handler', Thrift.Type.STRING, 2);
    output.writeString(this.handler);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 3);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAuthMethod = module.exports.TAuthMethod = function(args) {
  this.id = null;
  this.name = null;
  this.auth_type = null;
  this.priority = null;
  this.enabled = null;
  this.domain_id = null;
  this.address = null;
  this.port = null;
  this.tree = null;
  this.user_attribute = null;
  this.active_dir_domain = null;
  this.url_format = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.auth_type !== undefined) {
      this.auth_type = args.auth_type;
    }
    if (args.priority !== undefined) {
      this.priority = args.priority;
    }
    if (args.enabled !== undefined) {
      this.enabled = args.enabled;
    }
    if (args.domain_id !== undefined) {
      this.domain_id = args.domain_id;
    }
    if (args.address !== undefined) {
      this.address = args.address;
    }
    if (args.port !== undefined) {
      this.port = args.port;
    }
    if (args.tree !== undefined) {
      this.tree = args.tree;
    }
    if (args.user_attribute !== undefined) {
      this.user_attribute = args.user_attribute;
    }
    if (args.active_dir_domain !== undefined) {
      this.active_dir_domain = args.active_dir_domain;
    }
    if (args.url_format !== undefined) {
      this.url_format = args.url_format;
    }
  }
};
TAuthMethod.prototype = {};
TAuthMethod.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.auth_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.priority = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.domain_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.tree = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.user_attribute = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.active_dir_domain = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BOOL) {
        this.url_format = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAuthMethod.prototype.write = function(output) {
  output.writeStructBegin('TAuthMethod');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.auth_type !== null && this.auth_type !== undefined) {
    output.writeFieldBegin('auth_type', Thrift.Type.STRING, 3);
    output.writeString(this.auth_type);
    output.writeFieldEnd();
  }
  if (this.priority !== null && this.priority !== undefined) {
    output.writeFieldBegin('priority', Thrift.Type.I32, 4);
    output.writeI32(this.priority);
    output.writeFieldEnd();
  }
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 5);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  if (this.domain_id !== null && this.domain_id !== undefined) {
    output.writeFieldBegin('domain_id', Thrift.Type.I32, 6);
    output.writeI32(this.domain_id);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 7);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 8);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  if (this.tree !== null && this.tree !== undefined) {
    output.writeFieldBegin('tree', Thrift.Type.STRING, 9);
    output.writeString(this.tree);
    output.writeFieldEnd();
  }
  if (this.user_attribute !== null && this.user_attribute !== undefined) {
    output.writeFieldBegin('user_attribute', Thrift.Type.STRING, 10);
    output.writeString(this.user_attribute);
    output.writeFieldEnd();
  }
  if (this.active_dir_domain !== null && this.active_dir_domain !== undefined) {
    output.writeFieldBegin('active_dir_domain', Thrift.Type.STRING, 11);
    output.writeString(this.active_dir_domain);
    output.writeFieldEnd();
  }
  if (this.url_format !== null && this.url_format !== undefined) {
    output.writeFieldBegin('url_format', Thrift.Type.BOOL, 12);
    output.writeBool(this.url_format);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TTimezone = module.exports.TTimezone = function(args) {
  this.code = null;
  this.continent = null;
  this.city = null;
  this.comment = null;
  if (args) {
    if (args.code !== undefined) {
      this.code = args.code;
    }
    if (args.continent !== undefined) {
      this.continent = args.continent;
    }
    if (args.city !== undefined) {
      this.city = args.city;
    }
    if (args.comment !== undefined) {
      this.comment = args.comment;
    }
  }
};
TTimezone.prototype = {};
TTimezone.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.continent = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.city = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TTimezone.prototype.write = function(output) {
  output.writeStructBegin('TTimezone');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 1);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.continent !== null && this.continent !== undefined) {
    output.writeFieldBegin('continent', Thrift.Type.STRING, 2);
    output.writeString(this.continent);
    output.writeFieldEnd();
  }
  if (this.city !== null && this.city !== undefined) {
    output.writeFieldBegin('city', Thrift.Type.STRING, 3);
    output.writeString(this.city);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 4);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ServerError = module.exports.ServerError = function(args) {
  Thrift.TException.call(this, "ServerError")
  this.name = "ServerError"
  this.errcode = null;
  this.msg = null;
  if (args) {
    if (args.errcode !== undefined) {
      this.errcode = args.errcode;
    }
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
  }
};
Thrift.inherits(ServerError, Thrift.TException);
ServerError.prototype.name = 'ServerError';
ServerError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.errcode = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServerError.prototype.write = function(output) {
  output.writeStructBegin('ServerError');
  if (this.errcode !== null && this.errcode !== undefined) {
    output.writeFieldBegin('errcode', Thrift.Type.I32, 1);
    output.writeI32(this.errcode);
    output.writeFieldEnd();
  }
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 2);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LongJobError = module.exports.LongJobError = function(args) {
  Thrift.TException.call(this, "LongJobError")
  this.name = "LongJobError"
  this.msg = null;
  if (args) {
    if (args.msg !== undefined) {
      this.msg = args.msg;
    }
  }
};
Thrift.inherits(LongJobError, Thrift.TException);
LongJobError.prototype.name = 'LongJobError';
LongJobError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LongJobError.prototype.write = function(output) {
  output.writeStructBegin('LongJobError');
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LongJobWaiting = module.exports.LongJobWaiting = function(args) {
  Thrift.TException.call(this, "LongJobWaiting")
  this.name = "LongJobWaiting"
  this.jobid = null;
  if (args) {
    if (args.jobid !== undefined) {
      this.jobid = args.jobid;
    }
  }
};
Thrift.inherits(LongJobWaiting, Thrift.TException);
LongJobWaiting.prototype.name = 'LongJobWaiting';
LongJobWaiting.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.jobid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LongJobWaiting.prototype.write = function(output) {
  output.writeStructBegin('LongJobWaiting');
  if (this.jobid !== null && this.jobid !== undefined) {
    output.writeFieldBegin('jobid', Thrift.Type.STRING, 1);
    output.writeString(this.jobid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TCodec = module.exports.TCodec = function(args) {
  this.name = null;
  this.rate = null;
  this.psize = null;
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.rate !== undefined) {
      this.rate = args.rate;
    }
    if (args.psize !== undefined) {
      this.psize = args.psize;
    }
  }
};
TCodec.prototype = {};
TCodec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.rate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.psize = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TCodec.prototype.write = function(output) {
  output.writeStructBegin('TCodec');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.rate !== null && this.rate !== undefined) {
    output.writeFieldBegin('rate', Thrift.Type.STRING, 2);
    output.writeString(this.rate);
    output.writeFieldEnd();
  }
  if (this.psize !== null && this.psize !== undefined) {
    output.writeFieldBegin('psize', Thrift.Type.STRING, 3);
    output.writeString(this.psize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TActivity = module.exports.TActivity = function(args) {
  this.id = null;
  this.name = null;
  this.resource = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.resource !== undefined) {
      this.resource = args.resource;
    }
  }
};
TActivity.prototype = {};
TActivity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.resource = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TActivity.prototype.write = function(output) {
  output.writeStructBegin('TActivity');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.resource !== null && this.resource !== undefined) {
    output.writeFieldBegin('resource', Thrift.Type.STRING, 3);
    output.writeString(this.resource);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TRole = module.exports.TRole = function(args) {
  this.id = null;
  this.name = null;
  this.domain_id = null;
  this.resource = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.domain_id !== undefined) {
      this.domain_id = args.domain_id;
    }
    if (args.resource !== undefined) {
      this.resource = args.resource;
    }
  }
};
TRole.prototype = {};
TRole.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.domain_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.resource = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TRole.prototype.write = function(output) {
  output.writeStructBegin('TRole');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.domain_id !== null && this.domain_id !== undefined) {
    output.writeFieldBegin('domain_id', Thrift.Type.I32, 3);
    output.writeI32(this.domain_id);
    output.writeFieldEnd();
  }
  if (this.resource !== null && this.resource !== undefined) {
    output.writeFieldBegin('resource', Thrift.Type.STRING, 4);
    output.writeString(this.resource);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

