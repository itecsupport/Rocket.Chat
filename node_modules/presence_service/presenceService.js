//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var sharedService_ttypes = require('./sharedService_types')
var presenceService_ttypes = require('./presenceService_types')


var baseService = require('./baseService')
var baseServiceClient = baseService.Client
var baseServiceProcessor = baseService.Processor
var ttypes = require('./presenceService_types');
//HELPER FUNCTIONS AND STRUCTURES

presenceService_request_initial_status_args = function(args) {
  this.token = null;
  this.domain = null;
  this.request_uuid = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.domain !== undefined) {
      this.domain = args.domain;
    }
    if (args.request_uuid !== undefined) {
      this.request_uuid = args.request_uuid;
    }
  }
};
presenceService_request_initial_status_args.prototype = {};
presenceService_request_initial_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.domain = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.request_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

presenceService_request_initial_status_args.prototype.write = function(output) {
  output.writeStructBegin('presenceService_request_initial_status_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.domain !== null && this.domain !== undefined) {
    output.writeFieldBegin('domain', Thrift.Type.I32, 2);
    output.writeI32(this.domain);
    output.writeFieldEnd();
  }
  if (this.request_uuid !== null && this.request_uuid !== undefined) {
    output.writeFieldBegin('request_uuid', Thrift.Type.STRING, 3);
    output.writeString(this.request_uuid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

presenceService_request_initial_status_result = function(args) {
  this.serr = null;
  if (args instanceof sharedService_ttypes.ServerError) {
    this.serr = args;
    return;
  }
  if (args) {
    if (args.serr !== undefined) {
      this.serr = args.serr;
    }
  }
};
presenceService_request_initial_status_result.prototype = {};
presenceService_request_initial_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serr = new sharedService_ttypes.ServerError();
        this.serr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

presenceService_request_initial_status_result.prototype.write = function(output) {
  output.writeStructBegin('presenceService_request_initial_status_result');
  if (this.serr !== null && this.serr !== undefined) {
    output.writeFieldBegin('serr', Thrift.Type.STRUCT, 1);
    this.serr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

presenceService_publish_xmpp_presence_args = function(args) {
  this.token = null;
  this.ev = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.ev !== undefined) {
      this.ev = args.ev;
    }
  }
};
presenceService_publish_xmpp_presence_args.prototype = {};
presenceService_publish_xmpp_presence_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ev = new presenceService_ttypes.TXmppEvent();
        this.ev.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

presenceService_publish_xmpp_presence_args.prototype.write = function(output) {
  output.writeStructBegin('presenceService_publish_xmpp_presence_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.ev !== null && this.ev !== undefined) {
    output.writeFieldBegin('ev', Thrift.Type.STRUCT, 2);
    this.ev.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

presenceService_publish_xmpp_presence_result = function(args) {
  this.serr = null;
  if (args instanceof sharedService_ttypes.ServerError) {
    this.serr = args;
    return;
  }
  if (args) {
    if (args.serr !== undefined) {
      this.serr = args.serr;
    }
  }
};
presenceService_publish_xmpp_presence_result.prototype = {};
presenceService_publish_xmpp_presence_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serr = new sharedService_ttypes.ServerError();
        this.serr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

presenceService_publish_xmpp_presence_result.prototype.write = function(output) {
  output.writeStructBegin('presenceService_publish_xmpp_presence_result');
  if (this.serr !== null && this.serr !== undefined) {
    output.writeFieldBegin('serr', Thrift.Type.STRUCT, 1);
    this.serr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

presenceService_get_presence_info_for_user_args = function(args) {
  this.token = null;
  this.user = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
  }
};
presenceService_get_presence_info_for_user_args.prototype = {};
presenceService_get_presence_info_for_user_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

presenceService_get_presence_info_for_user_args.prototype.write = function(output) {
  output.writeStructBegin('presenceService_get_presence_info_for_user_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRING, 2);
    output.writeString(this.user);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

presenceService_get_presence_info_for_user_result = function(args) {
  this.success = null;
  this.serr = null;
  if (args instanceof sharedService_ttypes.ServerError) {
    this.serr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.serr !== undefined) {
      this.serr = args.serr;
    }
  }
};
presenceService_get_presence_info_for_user_result.prototype = {};
presenceService_get_presence_info_for_user_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serr = new sharedService_ttypes.ServerError();
        this.serr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

presenceService_get_presence_info_for_user_result.prototype.write = function(output) {
  output.writeStructBegin('presenceService_get_presence_info_for_user_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.serr !== null && this.serr !== undefined) {
    output.writeFieldBegin('serr', Thrift.Type.STRUCT, 1);
    this.serr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

presenceService_get_presence_info_for_ua_args = function(args) {
  this.token = null;
  this.sip_user = null;
  this.contact = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.sip_user !== undefined) {
      this.sip_user = args.sip_user;
    }
    if (args.contact !== undefined) {
      this.contact = args.contact;
    }
  }
};
presenceService_get_presence_info_for_ua_args.prototype = {};
presenceService_get_presence_info_for_ua_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sip_user = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contact = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

presenceService_get_presence_info_for_ua_args.prototype.write = function(output) {
  output.writeStructBegin('presenceService_get_presence_info_for_ua_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.sip_user !== null && this.sip_user !== undefined) {
    output.writeFieldBegin('sip_user', Thrift.Type.STRING, 2);
    output.writeString(this.sip_user);
    output.writeFieldEnd();
  }
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRING, 3);
    output.writeString(this.contact);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

presenceService_get_presence_info_for_ua_result = function(args) {
  this.success = null;
  this.serr = null;
  if (args instanceof sharedService_ttypes.ServerError) {
    this.serr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.serr !== undefined) {
      this.serr = args.serr;
    }
  }
};
presenceService_get_presence_info_for_ua_result.prototype = {};
presenceService_get_presence_info_for_ua_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serr = new sharedService_ttypes.ServerError();
        this.serr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

presenceService_get_presence_info_for_ua_result.prototype.write = function(output) {
  output.writeStructBegin('presenceService_get_presence_info_for_ua_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.serr !== null && this.serr !== undefined) {
    output.writeFieldBegin('serr', Thrift.Type.STRUCT, 1);
    this.serr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

presenceService_get_presence_info_args = function(args) {
  this.token = null;
  this.search_filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.search_filter !== undefined) {
      this.search_filter = args.search_filter;
    }
  }
};
presenceService_get_presence_info_args.prototype = {};
presenceService_get_presence_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.search_filter = new sharedService_ttypes.ORMFilter();
        this.search_filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

presenceService_get_presence_info_args.prototype.write = function(output) {
  output.writeStructBegin('presenceService_get_presence_info_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.search_filter !== null && this.search_filter !== undefined) {
    output.writeFieldBegin('search_filter', Thrift.Type.STRUCT, 2);
    this.search_filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

presenceService_get_presence_info_result = function(args) {
  this.success = null;
  this.serr = null;
  if (args instanceof sharedService_ttypes.ServerError) {
    this.serr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.serr !== undefined) {
      this.serr = args.serr;
    }
  }
};
presenceService_get_presence_info_result.prototype = {};
presenceService_get_presence_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.success = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readI32();
          var _size8 = 0;
          var _rtmp312;
          val7 = [];
          var _etype11 = 0;
          _rtmp312 = input.readListBegin();
          _etype11 = _rtmp312.etype;
          _size8 = _rtmp312.size;
          for (var _i13 = 0; _i13 < _size8; ++_i13)
          {
            var elem14 = null;
            elem14 = new presenceService_ttypes.TPresence();
            elem14.read(input);
            val7.push(elem14);
          }
          input.readListEnd();
          this.success[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serr = new sharedService_ttypes.ServerError();
        this.serr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

presenceService_get_presence_info_result.prototype.write = function(output) {
  output.writeStructBegin('presenceService_get_presence_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter15 in this.success)
    {
      if (this.success.hasOwnProperty(kiter15))
      {
        var viter16 = this.success[kiter15];
        output.writeI32(kiter15);
        output.writeListBegin(Thrift.Type.STRUCT, viter16.length);
        for (var iter17 in viter16)
        {
          if (viter16.hasOwnProperty(iter17))
          {
            iter17 = viter16[iter17];
            iter17.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.serr !== null && this.serr !== undefined) {
    output.writeFieldBegin('serr', Thrift.Type.STRUCT, 1);
    this.serr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

presenceService_get_presence_info_for_domain_args = function(args) {
  this.token = null;
  this.search_filter = null;
  if (args) {
    if (args.token !== undefined) {
      this.token = args.token;
    }
    if (args.search_filter !== undefined) {
      this.search_filter = args.search_filter;
    }
  }
};
presenceService_get_presence_info_for_domain_args.prototype = {};
presenceService_get_presence_info_for_domain_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.search_filter = new sharedService_ttypes.ORMFilter();
        this.search_filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

presenceService_get_presence_info_for_domain_args.prototype.write = function(output) {
  output.writeStructBegin('presenceService_get_presence_info_for_domain_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.search_filter !== null && this.search_filter !== undefined) {
    output.writeFieldBegin('search_filter', Thrift.Type.STRUCT, 2);
    this.search_filter.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

presenceService_get_presence_info_for_domain_result = function(args) {
  this.success = null;
  this.serr = null;
  if (args instanceof sharedService_ttypes.ServerError) {
    this.serr = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.serr !== undefined) {
      this.serr = args.serr;
    }
  }
};
presenceService_get_presence_info_for_domain_result.prototype = {};
presenceService_get_presence_info_for_domain_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size18 = 0;
        var _rtmp322;
        this.success = {};
        var _ktype19 = 0;
        var _vtype20 = 0;
        _rtmp322 = input.readMapBegin();
        _ktype19 = _rtmp322.ktype;
        _vtype20 = _rtmp322.vtype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var key24 = null;
          var val25 = null;
          key24 = input.readI32();
          var _size26 = 0;
          var _rtmp330;
          val25 = [];
          var _etype29 = 0;
          _rtmp330 = input.readListBegin();
          _etype29 = _rtmp330.etype;
          _size26 = _rtmp330.size;
          for (var _i31 = 0; _i31 < _size26; ++_i31)
          {
            var elem32 = null;
            elem32 = new presenceService_ttypes.TPresence();
            elem32.read(input);
            val25.push(elem32);
          }
          input.readListEnd();
          this.success[key24] = val25;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.serr = new sharedService_ttypes.ServerError();
        this.serr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

presenceService_get_presence_info_for_domain_result.prototype.write = function(output) {
  output.writeStructBegin('presenceService_get_presence_info_for_domain_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter33 in this.success)
    {
      if (this.success.hasOwnProperty(kiter33))
      {
        var viter34 = this.success[kiter33];
        output.writeI32(kiter33);
        output.writeListBegin(Thrift.Type.STRUCT, viter34.length);
        for (var iter35 in viter34)
        {
          if (viter34.hasOwnProperty(iter35))
          {
            iter35 = viter34[iter35];
            iter35.write(output);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.serr !== null && this.serr !== undefined) {
    output.writeFieldBegin('serr', Thrift.Type.STRUCT, 1);
    this.serr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

presenceServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
Thrift.inherits(presenceServiceClient, baseServiceClient)
presenceServiceClient.prototype.request_initial_status = function(token, domain, request_uuid, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_request_initial_status(token, domain, request_uuid);
};

presenceServiceClient.prototype.send_request_initial_status = function(token, domain, request_uuid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('request_initial_status', Thrift.MessageType.CALL, this.seqid);
  var args = new presenceService_request_initial_status_args();
  args.token = token;
  args.domain = domain;
  args.request_uuid = request_uuid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

presenceServiceClient.prototype.recv_request_initial_status = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new presenceService_request_initial_status_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.serr) {
    return callback(result.serr);
  }
  callback(null)
};
presenceServiceClient.prototype.publish_xmpp_presence = function(token, ev, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_publish_xmpp_presence(token, ev);
};

presenceServiceClient.prototype.send_publish_xmpp_presence = function(token, ev) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('publish_xmpp_presence', Thrift.MessageType.CALL, this.seqid);
  var args = new presenceService_publish_xmpp_presence_args();
  args.token = token;
  args.ev = ev;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

presenceServiceClient.prototype.recv_publish_xmpp_presence = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new presenceService_publish_xmpp_presence_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.serr) {
    return callback(result.serr);
  }
  callback(null)
};
presenceServiceClient.prototype.get_presence_info_for_user = function(token, user, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_presence_info_for_user(token, user);
};

presenceServiceClient.prototype.send_get_presence_info_for_user = function(token, user) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_presence_info_for_user', Thrift.MessageType.CALL, this.seqid);
  var args = new presenceService_get_presence_info_for_user_args();
  args.token = token;
  args.user = user;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

presenceServiceClient.prototype.recv_get_presence_info_for_user = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new presenceService_get_presence_info_for_user_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.serr) {
    return callback(result.serr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_presence_info_for_user failed: unknown result');
};
presenceServiceClient.prototype.get_presence_info_for_ua = function(token, sip_user, contact, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_presence_info_for_ua(token, sip_user, contact);
};

presenceServiceClient.prototype.send_get_presence_info_for_ua = function(token, sip_user, contact) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_presence_info_for_ua', Thrift.MessageType.CALL, this.seqid);
  var args = new presenceService_get_presence_info_for_ua_args();
  args.token = token;
  args.sip_user = sip_user;
  args.contact = contact;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

presenceServiceClient.prototype.recv_get_presence_info_for_ua = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new presenceService_get_presence_info_for_ua_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.serr) {
    return callback(result.serr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_presence_info_for_ua failed: unknown result');
};
presenceServiceClient.prototype.get_presence_info = function(token, search_filter, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_presence_info(token, search_filter);
};

presenceServiceClient.prototype.send_get_presence_info = function(token, search_filter) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_presence_info', Thrift.MessageType.CALL, this.seqid);
  var args = new presenceService_get_presence_info_args();
  args.token = token;
  args.search_filter = search_filter;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

presenceServiceClient.prototype.recv_get_presence_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new presenceService_get_presence_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.serr) {
    return callback(result.serr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_presence_info failed: unknown result');
};
presenceServiceClient.prototype.get_presence_info_for_domain = function(token, search_filter, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_get_presence_info_for_domain(token, search_filter);
};

presenceServiceClient.prototype.send_get_presence_info_for_domain = function(token, search_filter) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_presence_info_for_domain', Thrift.MessageType.CALL, this.seqid);
  var args = new presenceService_get_presence_info_for_domain_args();
  args.token = token;
  args.search_filter = search_filter;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

presenceServiceClient.prototype.recv_get_presence_info_for_domain = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new presenceService_get_presence_info_for_domain_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.serr) {
    return callback(result.serr);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_presence_info_for_domain failed: unknown result');
};
presenceServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
Thrift.inherits(presenceServiceProcessor, baseServiceProcessor)
presenceServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

presenceServiceProcessor.prototype.process_request_initial_status = function(seqid, input, output) {
  var args = new presenceService_request_initial_status_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.request_initial_status(args.token, args.domain, args.request_uuid, function (err, result) {
    var result = new presenceService_request_initial_status_result((err != null ? err : {success: result}));
    output.writeMessageBegin("request_initial_status", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

presenceServiceProcessor.prototype.process_publish_xmpp_presence = function(seqid, input, output) {
  var args = new presenceService_publish_xmpp_presence_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.publish_xmpp_presence(args.token, args.ev, function (err, result) {
    var result = new presenceService_publish_xmpp_presence_result((err != null ? err : {success: result}));
    output.writeMessageBegin("publish_xmpp_presence", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

presenceServiceProcessor.prototype.process_get_presence_info_for_user = function(seqid, input, output) {
  var args = new presenceService_get_presence_info_for_user_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_presence_info_for_user(args.token, args.user, function (err, result) {
    var result = new presenceService_get_presence_info_for_user_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_presence_info_for_user", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

presenceServiceProcessor.prototype.process_get_presence_info_for_ua = function(seqid, input, output) {
  var args = new presenceService_get_presence_info_for_ua_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_presence_info_for_ua(args.token, args.sip_user, args.contact, function (err, result) {
    var result = new presenceService_get_presence_info_for_ua_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_presence_info_for_ua", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

presenceServiceProcessor.prototype.process_get_presence_info = function(seqid, input, output) {
  var args = new presenceService_get_presence_info_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_presence_info(args.token, args.search_filter, function (err, result) {
    var result = new presenceService_get_presence_info_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_presence_info", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

presenceServiceProcessor.prototype.process_get_presence_info_for_domain = function(seqid, input, output) {
  var args = new presenceService_get_presence_info_for_domain_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.get_presence_info_for_domain(args.token, args.search_filter, function (err, result) {
    var result = new presenceService_get_presence_info_for_domain_result((err != null ? err : {success: result}));
    output.writeMessageBegin("get_presence_info_for_domain", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

